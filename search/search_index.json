{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nowadays, a handful of tools have been developed to demultiplex a mixture of cells, all relying on different bioinformatic preprocessing analyses and several filtering choices which vary consistently based on the experiment. With this pipeline, we try to provide a systematic benchmark and evaluation of their performance. We will make a comparison between genetic demultiplexing approaches and hashing demultiplexing methods and collect them into a unified pipeline to ensure fast processing of mixtures of cells either from real experiments or from simulations. Pipeline summary This pipeline is used as a donor deconvolution tool for single-cell genomics to demultiplex mixture of cells from a real experiment, or by simulating cell mixtures. It is built using Nextflow DSL2 implementation to allow running different tasks parallely across multiple compute infrastructures in a portable manner. The containerized pipeline uses Docker, Singularity and Conda containers to achieve high reproducibility. It compares and benchmarks the performance of different variant calling preprocessing tools and also demultiplexing with/without donor-specific genotypes in following steps: run a demultiplexing tool with an array of parameters analysis of the performance, e.g. statistics Quick start To get familiar with this new pipeline, let's run a test workflow through the pipeline without needing any other pipeline parameters. We use the dataset from the Popscle tutorial as test dataset. The pipeline uses Popscle as default demultiplexing tool. Install Nextflow . wget -qO- https://get.nextflow.io | bash - Download the executable package. chmod +x nextflow - Make the binary executable on your system. Install Docker . Download the dataset and unzipp it. You should have a directory called tutorial_dataset . Download the pipeline and test it on the dataset with a single command: cd tutorial_dataset nextflow run main.nf Start your own analysis Install Docker , Singularity and Conda for full pipeline reproducibility. Prepare your own dataset. For the required input data for different demultiplexing tools see Usage docs . Specify the tool with the parameter --demux_tool <demuxlet / vireo / souporcell>. For example, try vireo with: nextflow run main.nf --demux_tool vireo -celldata $CELL_FILE -donor $DONOR_FILE -ndonor $NUM_DONOR Documentation The full documentation is available on Github . Run instructions demux_tool This parameter allows the users to demultiplex mixtures of cells with different tools. Currently there are three options: demuxlet, vireo and souporcell. The default setting is to use demuxlet.","title":"Introduction"},{"location":"#pipeline-summary","text":"This pipeline is used as a donor deconvolution tool for single-cell genomics to demultiplex mixture of cells from a real experiment, or by simulating cell mixtures. It is built using Nextflow DSL2 implementation to allow running different tasks parallely across multiple compute infrastructures in a portable manner. The containerized pipeline uses Docker, Singularity and Conda containers to achieve high reproducibility. It compares and benchmarks the performance of different variant calling preprocessing tools and also demultiplexing with/without donor-specific genotypes in following steps: run a demultiplexing tool with an array of parameters analysis of the performance, e.g. statistics","title":"Pipeline summary"},{"location":"#quick-start","text":"To get familiar with this new pipeline, let's run a test workflow through the pipeline without needing any other pipeline parameters. We use the dataset from the Popscle tutorial as test dataset. The pipeline uses Popscle as default demultiplexing tool. Install Nextflow . wget -qO- https://get.nextflow.io | bash - Download the executable package. chmod +x nextflow - Make the binary executable on your system. Install Docker . Download the dataset and unzipp it. You should have a directory called tutorial_dataset . Download the pipeline and test it on the dataset with a single command: cd tutorial_dataset nextflow run main.nf","title":"Quick start"},{"location":"#start-your-own-analysis","text":"Install Docker , Singularity and Conda for full pipeline reproducibility. Prepare your own dataset. For the required input data for different demultiplexing tools see Usage docs . Specify the tool with the parameter --demux_tool <demuxlet / vireo / souporcell>. For example, try vireo with: nextflow run main.nf --demux_tool vireo -celldata $CELL_FILE -donor $DONOR_FILE -ndonor $NUM_DONOR","title":"Start your own analysis"},{"location":"#documentation","text":"The full documentation is available on Github .","title":"Documentation"},{"location":"#run-instructions","text":"","title":"Run instructions"},{"location":"#demux_tool","text":"This parameter allows the users to demultiplex mixtures of cells with different tools. Currently there are three options: demuxlet, vireo and souporcell. The default setting is to use demuxlet.","title":"demux_tool"},{"location":"parameter/","text":"Input options Demuxlet","title":"Parameter docs"},{"location":"parameter/#input-options","text":"","title":"Input options"},{"location":"parameter/#demuxlet","text":"","title":"Demuxlet"},{"location":"usage/","text":"Usage Input data The pipeline offers different demultiplexing tools, which have different requirements of input data. Demuxlet It uses pileup files and external genotyping data as input. Therefore, demuxlet requires the following input: Pileup files (CEL,VAR and PLP) produced by dsc-pileup. Alternatively, demuxlet can also use the sequence alignment file (SAM/BAM/CRAM) produced by the standard 10x sequencing platform, or any other barcoded single cell RNA-seq. a VCF/BCF file containing the genotype (GT), posterior probability (GP), or genotype likelihood (GL) to assign each barcode to a specific sample or a pair of samples in the VCF file. Sourporcell the cellranger bam the cellranger barcodes file a reference fasta Vireo The only requirement is two count matrices (variant-by-cell) of reads or UMIs for each variant in each cell: AD for alternative allele DP depth (i.e., summary of alternative and reference alleles). These two matrices can be obtained through different methodes: a cellSNP output folder containing VCF for variants info and sparse matrices AD and DP Vartrix outputs with three or four files: alt.mtx,ref.mtx,barcodes.tsv,SNP.vcf.gz standard VCF file with variants by cells So you can run Vireo either with a cell VCF file or with two sparse matrices AD and DP. Analysis The demultiplexing step is followed by an analysis. There are 4 tsv output files in total. tool_result.tsv Trial singlets doublets ambigous/unassigned Tool Trial 1 498 2 0 Tool Trial 2 499 1 0 Tool Trial ... ... ... ... tool_result_detail.tsv Trial donor 1 donor 2 donor ... doublet unassigned Tool Trial 1 242 252 ... 6 0 Tool Trial 2 241 253 ... 5 1 Tool Trial ... ... ... ... ... ... tool_assignment.tsv barcode Tool Trial 1 Tool Trial 2 Tool Trial ... AAACGCTGAAGATG-1 donor 1 donor 1 donor 1 AAAGATCTGCGTTA-1 donor 2 donor 2 donor 1 ... ... ... ... tool_trial.tsv Parameter Tool Trial 1 Tool Trial 2 Tool Trial ... threads 2 3 ... clusters 2 2 ... ploidy 2 2 ... ... ... ... ...","title":"Usage docs"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#input-data","text":"The pipeline offers different demultiplexing tools, which have different requirements of input data.","title":"Input data"},{"location":"usage/#demuxlet","text":"It uses pileup files and external genotyping data as input. Therefore, demuxlet requires the following input: Pileup files (CEL,VAR and PLP) produced by dsc-pileup. Alternatively, demuxlet can also use the sequence alignment file (SAM/BAM/CRAM) produced by the standard 10x sequencing platform, or any other barcoded single cell RNA-seq. a VCF/BCF file containing the genotype (GT), posterior probability (GP), or genotype likelihood (GL) to assign each barcode to a specific sample or a pair of samples in the VCF file.","title":"Demuxlet"},{"location":"usage/#sourporcell","text":"the cellranger bam the cellranger barcodes file a reference fasta","title":"Sourporcell"},{"location":"usage/#vireo","text":"The only requirement is two count matrices (variant-by-cell) of reads or UMIs for each variant in each cell: AD for alternative allele DP depth (i.e., summary of alternative and reference alleles). These two matrices can be obtained through different methodes: a cellSNP output folder containing VCF for variants info and sparse matrices AD and DP Vartrix outputs with three or four files: alt.mtx,ref.mtx,barcodes.tsv,SNP.vcf.gz standard VCF file with variants by cells So you can run Vireo either with a cell VCF file or with two sparse matrices AD and DP.","title":"Vireo"},{"location":"usage/#analysis","text":"The demultiplexing step is followed by an analysis. There are 4 tsv output files in total.","title":"Analysis"},{"location":"usage/#tool_resulttsv","text":"Trial singlets doublets ambigous/unassigned Tool Trial 1 498 2 0 Tool Trial 2 499 1 0 Tool Trial ... ... ... ...","title":"tool_result.tsv"},{"location":"usage/#tool_result_detailtsv","text":"Trial donor 1 donor 2 donor ... doublet unassigned Tool Trial 1 242 252 ... 6 0 Tool Trial 2 241 253 ... 5 1 Tool Trial ... ... ... ... ... ...","title":"tool_result_detail.tsv"},{"location":"usage/#tool_assignmenttsv","text":"barcode Tool Trial 1 Tool Trial 2 Tool Trial ... AAACGCTGAAGATG-1 donor 1 donor 1 donor 1 AAAGATCTGCGTTA-1 donor 2 donor 2 donor 1 ... ... ... ...","title":"tool_assignment.tsv"},{"location":"usage/#tool_trialtsv","text":"Parameter Tool Trial 1 Tool Trial 2 Tool Trial ... threads 2 3 ... clusters 2 2 ... ploidy 2 2 ... ... ... ... ...","title":"tool_trial.tsv"}]}